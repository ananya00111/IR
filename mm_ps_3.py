# -*- coding: utf-8 -*-
"""MM PS - 3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CN2lx45ijZVqGCJzVWiRBRRuA4fCQXjD
"""

import numpy as np
import matplotlib.pyplot as pt
from scipy import stats

"""#Question - 1"""

temp=[200,250,200,250,189.65,260.35,225,225,225,225,225,225]
conversion=[43,78,69,73,48,78,65,74,76,79,83,81]

x=np.array(temp)
y=np.array(conversion)
pt.scatter(x,y)

def calculate_y(intercept, slope, temp):
    y0 = []
    for i in range(0,len(temp)):
        dummy=0
        dummy=intercept+(slope*temp[i])
        y0.append(dummy)
    return y0

slope,intercept,r,p,std_err=stats.linregress(x,y)
y0 = calculate_y(intercept, slope, temp)

        
pt.plot(x,y0)
pt.show()

t,p=stats.ttest_ind(y,y0)
print("T-test value: ",p)

if(p<0.05):
    print("model is adequte")
else:
    print("model is not adequte")

"""#Question - 2"""

x1=np.array([195,255,195,255,255,255,255,195,255,255,255,255,255,340])
x2=np.array([4.0,4.0,4.60,4.60,4.20,4.10,4.60,4.30,4.30,4.0,4.70,4.30,4.72,4.30])
y=np.array([1004,1636,852,1506,1272,1270,1269,903,1555,1260,1146,1276,1225,1321])

slope,intercept,r,p,std_err=stats.linregress(x1,y)
y0 = calculate_y(intercept, slope, x1)

print(slope,intercept)
pt.scatter(x1,y)
pt.show()
pt.plot(x1,y0)
pt.show()

t1,p1=stats.ttest_ind(y,y0)
print("T-test value: ",p1)

slope,intercept,r,p1,std_err=stats.linregress(x2,y)
y0 = calculate_y(intercept, slope, x2)

print(slope,intercept)

pt.plot(x2,y0)
pt.show()

t2,p2=stats.ttest_ind(y,y0)
print("T-test value: ",p2)

if(p2>p1):
    print("dose predicts gain better")
else:
    print("drive-in predicts gain better")
    
if(p1<0.05):
    print("model is adequate")
else:
    print("model is not adequate")

"""#Question - 3"""

year=[1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999]
nitrogen=[0.73,2.55,2.90,3.83,2.53,2.77,3.93,2.03,4.39,3.04,3.41,5.07,3.95,3.14,3.44,3.63,4.50,3.95,5.24,3.30,4.36,3.33]

x=np.array(year)
y=np.array(nitrogen)
pt.scatter(x,y)

slope,intercept,r,p,std_err=stats.linregress(x,y)
y0=calculate_y(intercept, slope, year)

        
pt.plot(x,y0)
pt.show()

print(slope,intercept)

corelation=np.corrcoef(x,y)[0,1]
r=corelation**2

print("R^2 -value: ",r)

#trend
print("not a good fit to linear model")

"""#Question - 4

"""

x = np.array([2.27,2.76,3.27,3.31,3.70,3.85,4.31,4.39,4.42,4.81,4.90,5.05,5.21,5.62,5.88])
y = np.array([2500,365,23700,5491,14000,78200,70700,138000,304500,341948,49375,260200,867023,1640000,1092759])

x=np.log2(x)
y=np.log2(y)

slope, intercept, r, p, std_err = stats.linregress(x, y)
y0 = calculate_y(intercept, slope, x)

pt.plot(x, y, 'bo', label='yi')
pt.plot(x, y0, label="predictedY", color='green')

pt.xlabel("X")
pt.ylabel("Y")
pt.title('Linear Regression - a')

pt.show()

print("Slope and intercept for X vs Y: ", slope, intercept)
ans = np.exp2(np.array([intercept]))
print("a is ", ans[0], " \nb is ", slope)

#Part 2

x = np.log2(x)

a = np.sum(x * y) / np.sum(x ** 2)


def fn(x):
    return a * x


pt.plot(x, y, 'bo', label='yi')
pt.plot(x, fn(x), label="predictedY", color='green')
pt.xlabel("X")
pt.ylabel("Y")
pt.title('Linear Regression - b')
pt.show()

# predictedY = fn(x)
print("a is ", a)

"""#Question - 5"""

x = np.array([57.9, 108.2, 149.6, 227.9, 778.1, 1428.2, 2837.9, 4488.9])
y = np.array([88, 225, 365, 687, 4329, 10753, 30660, 60150])

# T = Cr^a
# log(T) = log(C) + a*log(r)
# y = a + b*x

x = np.log2(x)
y = np.log2(y)

# fit linear Regression Model
slope, intercept, r, p, std_err = stats.linregress(x, y)
y0 = calculate_y(intercept, slope, x)

pt.plot(x, y, 'bo', label='given Y')
pt.plot(x, y0, label="predicted", color='red')

pt.xlabel("X")
pt.ylabel("Y")
pt.legend(loc='upper left')
pt.title('Subdivision a')

pt.show()

print(f"Slope={slope} and intercept ={intercept}")
ans = np.exp2(np.array([intercept]))
print(f"C= {ans[0]} \na ={slope}")