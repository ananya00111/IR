# -*- coding: utf-8 -*-
"""MM PS - 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XF715p5WkviabJtf-5vwX5YX4kSd9HmA
"""

import matplotlib.pyplot as plt
import random
import math
import scipy.stats as stats
from statistics import mean
from scipy import interpolate

"""#Question - 1

"""

def forward_diff_tab(arr):
  forward_diff_table=[]

  while len(arr)>1:
    temp=[]
    
    for i in range(1,len(arr)):
      temp.append(arr[i]-arr[i-1])
    forward_diff_table.append(temp)
    arr = temp

  return forward_diff_table

def ncr(n, r,forward):
  val = 1
  for i in range(r):
    if forward == True:
      val *= (n - i)
    else:
      val *= (n + i)

  if r == 1:
    return val
  a = val / math.factorial(r)
  return a

def interpolation(y_0, n, fdt, u, forward):
  val = y_0
  if forward == True:
    for i in range(n):
      val += ncr(u, i+1,forward) * fdt[i][0]
  else:
    for i in range(n):
      val += ncr(u, i+1,False) * fdt[i][-1]

  return val

year=[1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995]
exp=[731, 782, 833, 886, 956, 1049, 1159, 1267, 1367, 1436, 1505]

forward_diff_table = forward_diff_tab(exp)

y_cap = []
for i in range(len(year)):
  u = (year[i]-year[0])/(year[1]-year[0])
  y_cap.append(interpolation(exp[0], len(forward_diff_table), forward_diff_table, u, True))

plt.plot(year, y_cap)

year=[1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993]
exp=[731, 782, 833, 886, 956, 1049, 1159, 1267, 1367]

forward_diff_table = forward_diff_tab(exp)
year_x=[1994,1995]

y_cap = []
for i in range(len(year_x)):
  if abs(year_x[i] - year[0]) < abs(year_x[i] - year[-1]):
    u = (year_x[i]-year[0])/(year[1]-year[0])
    y_cap.append(interpolation(exp[0], len(forward_diff_table), forward_diff_table, u, True))
  else:
    u = (year_x[i]-year[-1])/(year[1]-year[0])
    y_cap.append(interpolation(exp[0], len(forward_diff_table), forward_diff_table, u, False))

print(y_cap)
plt.plot(year_x, y_cap)

"""#Question - 2"""

t=[300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]
e =[0.024, 0.035, 0.046, 0.058, 0.067, 0.083, 0.097, 0.111, 0.125, 0.140, 0.155, 0.170, 0.186, 0.202, 0.219, 0.235, 0.252, 0.269]

forward_diff_table = forward_diff_tab(e)

y_cap = []
error=[]
for i in range(len(t)):
  u = (t[i]-t[0])/(t[1]-t[0])
  y_cap.append(interpolation(e[0], len(forward_diff_table), forward_diff_table, u, True))
  error.append(y_cap[-1]-e[i])
plt.plot(t,y_cap)
plt.show()

plt.plot(t,e)

"""#Question - 3"""

def newton_divi_diff_table(x,y,n):
  divi_diff = [[0 for i in range(10)] for j in range(10)]
  for i in range(n):
    divi_diff[i][0]=y[i]
  for i in range(1, n): 
    for j in range(n - i): 
        divi_diff[j][i] = ((divi_diff[j][i - 1] - divi_diff[j + 1][i - 1]) /(x[j] - x[i + j]));
  return divi_diff

def prevterm(i, value, x): 
    prev = 1
    for j in range(i): 
        prev = prev * (value - x[j])
    return prev

def newton_formula(value, x, y, n): 
    sum_temp = y[0][0]; 
    for i in range(1, n):
        sum_temp = sum_temp + (prevterm(i, value, x) * y[0][i])
    return sum_temp

x=[0,1,2,5.5,11,13,16,18]
y=[0.5, 3.134, 5.3, 9.9, 10.2, 9.35,7.2,6.2]


x_val=[0.5,3]
divi_diff = newton_divi_diff_table(x,y,len(x))
y_cap=[]
for i in x_val:
  y_cap.append(newton_formula(i,x,divi_diff,len(x)))

print(divi_diff)
print(y_cap)

def lag_interpolation(x,y,x_val):
  res=0
  for i in range(len(x)):
    numr=1
    denr = 1
    for j in range(len(x)):
      if j!=i:
        numr *= (x_val - x[j])
      if j!=i:
        denr *= (x[i] - x[j])
    res += ((numr/denr)*y[i])
  return res


x=[0,1,2,5.5,11,13,16,18]
y=[0.5, 3.134, 5.3, 9.9, 10.2, 9.35,7.2,6.2]

x_val = [0.5,3]
y_cap=[]
for i in x_val:
  y_cap.append(lag_interpolation(x,y,i))

print(y_cap)

"""#Question - 4"""

import matplotlib.pyplot as pt
from scipy.interpolate import CubicSpline

x = [0, 8, 16, 24, 32, 40]
y = [14.621, 11.843, 9.870, 8.418, 7.305, 6.413]

f = CubicSpline(x, y)
y0 = f(x)

x_new = [4, 36]
y_new = f(x_new)

print(y_new)

pt.title("CubicSpline")
pt.scatter(x, y)
pt.plot(x, y0)
pt.show()