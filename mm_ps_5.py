# -*- coding: utf-8 -*-
"""MM PS - 5

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12vfxEQlvWtDUtyf_Y_ADLBNig4efZBG2
"""

import numpy as np
import matplotlib.pyplot as pt
from scipy import stats

"""#Question - 1"""

x=[1989,1990,1991,1992,1993,1994,1995]
box=10000
y=[21.0,19.4,22.6,28.2,30.4,24.0,25.0]

for i in range(len(y)):
    y[i]*=box

x=np.array(x)
y=np.array(y)
pt.plot(x,y)

def calculate_y(intercept, slope, temp):
    y0 = []
    for i in range(0,len(temp)):
        dummy=0
        dummy=intercept+(slope*temp[i])
        y0.append(dummy)
    return y0

slope,intercept,r,p,std_err=stats.linregress(x,y)
y0=calculate_y(intercept, slope, x)

print("Y= "+str(slope)+" x + "+str(intercept))       
pt.plot(x,y0)
pt.show()

percent=[]
relative=[]
for i in range(len(y)):
    dummy=(y[i]/y0[i])*100
    percent.append(dummy)
    dummy=((y[i]-y0[i])/y0[i])*100
    relative.append(dummy)

print(" Percent cyclic variation")
print(percent)

print("relative cyclic variation")
print(relative)

#t-test

t,p=stats.ttest_ind(y,y0)
print("T-test value: ",p)    

#fluctuation
a=max(percent)
b=max(relative)

p=percent.index(a)
q=relative.index(b)

print("In Percent of trend fluctuation is at the year: ",x[p])
print("In relative cyclic variation fluctuation is at the year: ",x[q])

print("Yes the year is same in both measure")

"""#Question - 2"""

x=[1991,1992,1993,1994,1995]
y=[102,120,90,78,110,126,95,83,111,128,97,86,115,135,103,91,122,144,110,98]

#step-1
movingAvg1=[]
for i in range(0,len(y)-3):
    s=0
    a=0
    for j in range(4):
        if(i+j<len(y)):
            s+=y[i+j]
    a=s/4
    movingAvg1.append(a)
print(movingAvg1)
    
#step-2
movingAvg2=[]
for i in range(len(movingAvg1)-1):
    s=0
    a=0
    for j in range(2):
        if(i+j<len(movingAvg1)):
         s+=movingAvg1[i+j]
    a=s/2
    movingAvg2.append(a)
print(movingAvg2)

#step-3

percent=[0,0]

for i in range(len(movingAvg2)):
    if( i+2<len(y)):
        dummy=(y[i+2]/movingAvg2[i])*100
        percent.append(dummy)
percent.append(0)    
percent.append(0) 

print(percent)

#step-4

q1=[]
q2=[]
q3=[]
q4=[]

for i in range(0,17,4):
    q1.append(percent[0+i])
    q2.append(percent[1+i])
    q3.append(percent[2+i])
    q4.append(percent[3+i])
    


q1=list(filter(lambda num: num != 0, q1))
q2=list(filter(lambda num: num != 0, q2))
q3=list(filter(lambda num: num != 0, q3))
q4=list(filter(lambda num: num != 0, q4))

print(q2)
q1.remove(max(q1))
q1.remove(min(q1))
          
q2.remove(max(q2))
q2.remove(min(q2))

q3.remove(max(q3))
q3.remove(min(q3))

q4.remove(max(q4))
q4.remove(min(q4))

a1=sum(q1)/len(q1)
a2=sum(q2)/len(q2)
a3=sum(q3)/len(q3)
a4=sum(q4)/len(q4)

a=a1+a2+a3+a4


print("Q1: ",a1)
print("Q2: ",a2)
print("Q3: ",a3)
print("Q4: ",a4)

print("Total Index: ",a)

deseason_i=[]
d=400/a

deseason_i.append(a1*d)
deseason_i.append(a2*d)
deseason_i.append(a3*d)
deseason_i.append(a4*d)

print("modified: ",deseason_i)

"""#Question - 3"""

import matplotlib.pyplot as pt

x=[1992,1993,1994,1995]
y=[5.6,6.8,6.3,5.2,5.7,6.7,6.4,5.4,5.3,6.6,6.1,5.1,5.4,6.9,6.2,5.3]

#step-1
movingAvg1=[]
for i in range(len(y)-3):
    s=0
    a=0
    for j in range(4):
        if(i+j<len(y)):
            s+=y[i+j]
    a=s/4
    movingAvg1.append(a)
print(movingAvg1)
    
#step-2
movingAvg2=[]
for i in range(len(movingAvg1)-1):
    s=0
    a=0
    for j in range(2):
        if(i+j<len(movingAvg1)):
         s+=movingAvg1[i+j]
    a=s/2
    movingAvg2.append(a)
print(movingAvg2)

#step-3

percent=[0,0]

for i in range(len(movingAvg2)):
    if( i+2<len(y)):
        dummy=(y[i+2]/movingAvg2[i])*100
        percent.append(dummy)
percent.append(0)    
percent.append(0) 

print(percent)
print(len(percent))
#step-4

q1=[]
q2=[]
q3=[]
q4=[]

for i in range(0,13,4):
    q1.append(percent[0+i])
    q2.append(percent[1+i])
    q3.append(percent[2+i])
    q4.append(percent[3+i])
 

q1=list(filter(lambda num: num != 0, q1))
q2=list(filter(lambda num: num != 0, q2))
q3=list(filter(lambda num: num != 0, q3))
q4=list(filter(lambda num: num != 0, q4))

q1.remove(max(q1))
q1.remove(min(q1))
          
q2.remove(max(q2))
q2.remove(min(q2))

q3.remove(max(q3))
q3.remove(min(q3))

q4.remove(max(q4))
q4.remove(min(q4))

a1=sum(q1)/len(q1)
a2=sum(q2)/len(q2)
a3=sum(q3)/len(q3)
a4=sum(q4)/len(q4)

a=a1+a2+a3+a4


print("Q1: ",a1)
print("Q2: ",a2)
print("Q3: ",a3)
print("Q4: ",a4)

print("Total Index: ",a)

deseason_i=[]
d=400/a

deseason_i.append(a1*d)
deseason_i.append(a2*d)
deseason_i.append(a3*d)
deseason_i.append(a4*d)

print("modified: ",deseason_i)

deseason_i=deseason_i*4

print("modified: ",deseason_i)

y0=[]

for i in range(len(y)):
    y0.append((y[i]/deseason_i[i])*100)
    

pt.plot(y)
pt.plot(movingAvg2)
pt.show()

"""#Question - 4

"""

import numpy as np
import matplotlib.pyplot as pt
from scipy import stats

x=[1992,1993,1994,1995]
y=[293,246,231,282,301,252,227,291,304,259,239,296,306,265,240,300]

#step-1
movingAvg1=[]
for i in range(len(y)-3):
    s=0
    a=0
    for j in range(4):
        if(i+j<len(y)):
            s+=y[i+j]
    a=s/4
    movingAvg1.append(a)
print(movingAvg1)
    
#step-2
movingAvg2=[]
for i in range(len(movingAvg1)-1):
    s=0
    a=0
    for j in range(2):
        if(i+j<len(movingAvg1)):
         s+=movingAvg1[i+j]
    a=s/2
    movingAvg2.append(a)
print(movingAvg2)

#step-3

percent=[0,0]

for i in range(len(movingAvg2)):
    if( i+2<len(y)):
        dummy=(y[i+2]/movingAvg2[i])*100
        percent.append(dummy)
percent.append(0)    
percent.append(0) 

print(percent)

#step-4

q1=[]
q2=[]
q3=[]
q4=[]

for i in range(0,13,4):
    q1.append(percent[0+i])
    q2.append(percent[1+i])
    q3.append(percent[2+i])
    q4.append(percent[3+i])
 

q1=list(filter(lambda num: num != 0, q1))
q2=list(filter(lambda num: num != 0, q2))
q3=list(filter(lambda num: num != 0, q3))
q4=list(filter(lambda num: num != 0, q4))

print(q1)

q1.remove(max(q1))
q1.remove(min(q1))
          
q2.remove(max(q2))
q2.remove(min(q2))

q3.remove(max(q3))
q3.remove(min(q3))

q4.remove(max(q4))
q4.remove(min(q4))

a1=sum(q1)/len(q1)
a2=sum(q2)/len(q2)
a3=sum(q3)/len(q3)
a4=sum(q4)/len(q4)

a=a1+a2+a3+a4


print("Q1: ",a1)
print("Q2: ",a2)
print("Q3: ",a3)
print("Q4: ",a4)

print("Total Index: ",a)

deseason_i=[]
d=400/a

deseason_i.append(a1*d)
deseason_i.append(a2*d)
deseason_i.append(a3*d)
deseason_i.append(a4*d)

deseason_i=deseason_i*4

print("modified: ",deseason_i)

y0=[]

for i in range(len(y)):
    y0.append((y[i]/deseason_i[i])*100)
    
print("d: ",y0)    
x=[0] * (len(y))
mid=len(y)//2-1

x[mid]=-0.5
x[mid+1]=0.5

for i in range(mid-1,-1,-1):
    x[i]=x[i+1]-1
    
for i in range(mid+2,len(x)):
    x[i]=x[i-1]+1

for i in range(len(x)):
    x[i]*=2   
    
yp=[]
def calculate_y():
    y0=[]
    for i in range(0,len(x)):
        dummy=0
        dummy=intercept+(slope*x[i])
        y0.append(dummy)
    return y0
        
#fit linear Regression Model
slope,intercept,r,p,std_err=stats.linregress(x,y0)
yp=calculate_y()
print(x)
print(slope,intercept)
   
#percent cyclic variation and relative cyclic
percent=[]
relative=[]
for i in range(len(y)):
    dummy=(y0[i]/yp[i])*100
    percent.append(dummy)
    dummy=((y0[i]-yp[i])/yp[i])*100
    relative.append(dummy)

print(" Percent cyclic variation")
print(percent)

print("relative cyclic variation")
print(relative)

pt.plot(y0,color="blue")
pt.plot(y,color="green")
pt.plot(percent,color="red")
pt.plot(relative,color="pink")
pt.show()